{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Chaos Bonobo # Chaos Bonobo is a framework for implementing and scheduling the injection of failures and disruptions in the normal operation of hosts. These induced failure scenarios constitute controlled experiments, through which we intend to test the behaviour of a system to possible mishaps and uncover any systemic weaknesses. This is the subject matter and goal of Chaos Engineering as a discipline: Chaos Engineering is the discipline of experimenting on a system in order to build confidence in the system\u2019s capability to withstand turbulent conditions in production. Architecture # Chaos Bonobo consists of two types of components. One central Server and multiple agents. The Server should run on a separate host, and it is where the user will schedule which experiments should be executed on which targeted hosts, when to be triggered and for how long. The Agents should be distributed on the hosts under test. These are active agents that will be querying the Server for failure instructions , once every 5 minutes. The Agents incorporate the recipe for executing the ordered experiments, when the trigger time arrives. If the Agents lose connection with the Server (e.g. the Server is stopped) for more than a configured time (ref. TOLERANCE setting), the Agents will remove any already scheduled experiments. This way, by stopping the Server, all planned experiments will get cancelled. The configurable tolerance serves for the continuation of experiments that will momentarily bring a host to an air-gapped state (e.g. bringing the host's network down). In that case, the tolerance should be set to be larger than the duration of such disruption scenarios. The Agents will send notifications over to the Server, about important events like the actual start of an experiment, its termination, or possible failures. That way the Server is a common place where the reporting of all conducted experiments are collected. In the event when an Agent looses connection with the Server (e.g. during an experiment of disabling its network) and the Agent wishes to send a message to the Server, these messages will be buffered, until the Agent restores its connection with the Server. They will be then sent to the Server, but with the timestamp of the originally intended time of delivery.","title":"Introduction"},{"location":"#about-chaos-bonobo","text":"Chaos Bonobo is a framework for implementing and scheduling the injection of failures and disruptions in the normal operation of hosts. These induced failure scenarios constitute controlled experiments, through which we intend to test the behaviour of a system to possible mishaps and uncover any systemic weaknesses. This is the subject matter and goal of Chaos Engineering as a discipline: Chaos Engineering is the discipline of experimenting on a system in order to build confidence in the system\u2019s capability to withstand turbulent conditions in production.","title":"About Chaos Bonobo"},{"location":"#architecture","text":"Chaos Bonobo consists of two types of components. One central Server and multiple agents. The Server should run on a separate host, and it is where the user will schedule which experiments should be executed on which targeted hosts, when to be triggered and for how long. The Agents should be distributed on the hosts under test. These are active agents that will be querying the Server for failure instructions , once every 5 minutes. The Agents incorporate the recipe for executing the ordered experiments, when the trigger time arrives. If the Agents lose connection with the Server (e.g. the Server is stopped) for more than a configured time (ref. TOLERANCE setting), the Agents will remove any already scheduled experiments. This way, by stopping the Server, all planned experiments will get cancelled. The configurable tolerance serves for the continuation of experiments that will momentarily bring a host to an air-gapped state (e.g. bringing the host's network down). In that case, the tolerance should be set to be larger than the duration of such disruption scenarios. The Agents will send notifications over to the Server, about important events like the actual start of an experiment, its termination, or possible failures. That way the Server is a common place where the reporting of all conducted experiments are collected. In the event when an Agent looses connection with the Server (e.g. during an experiment of disabling its network) and the Agent wishes to send a message to the Server, these messages will be buffered, until the Agent restores its connection with the Server. They will be then sent to the Server, but with the timestamp of the originally intended time of delivery.","title":"Architecture"},{"location":"about/","text":"Github repo # chaos-bonobo Version # 1.3.2 Licence # Apache-2.0","title":"About"},{"location":"about/#github-repo","text":"chaos-bonobo","title":"Github repo"},{"location":"about/#version","text":"1.3.2","title":"Version"},{"location":"about/#licence","text":"Apache-2.0","title":"Licence"},{"location":"commonExperiments/","text":"Experiments description # The full set of experiments is centrally defined on the Server, in a file of a YAML syntax. Its default location is /etc/chaos-bonobo/experiments.yaml (also ref. Server Configuration ). Its layout can be examined with an example, as follows: - host: 10.10.10.10 failures: - type: Block_Address options: policy: INPUT ip: 10.10.140.100 #disable: true start: 20:32:30 duration: 30m - type: Kill_Process options: pname: sshd #signal: SIGKILL #disable: true start: 0m duration: 0m - type: Stop_Service options: service: nfsserver #disable: true start: 2023-12-31 23:45 duration: 45m - host: NTP-server failures: - type: Block_Address options: policy: INPUT ip: 10.10.140.100 #disable: true start: 1h duration: 5m Common experiment settings # We will explain the structure and common settings of the experiments. The details of each particular type of experiment are provided in 'Experiments by type' . host The ID by which an Agent, hosted in a targeted machine, identifies itself. An Agent that advertises itself with that ID will retrieve the experiments of the matched 'host' list. It can be, for instance, the targeted host's IP address (e.g. 10.10.10.10) or its hostname (e.g. NTP-server). Also refer to Dynamic host IDs . failures The set of experiments planned for the corresponding host. type The type of experiment (ref. Experiments by type ). options The experiment's options, specific to that particular type of experiment (ref. Experiments by type ). disable If True, this experiment will be skipped. Default value is False. start The trigger time for that experiment. It can be either an absolute time/date value, or a relative one, with reference to the experiments initiation instance (ref. Server reload ). Below are some examples of possible start values. Value Interpretation 10:30 today, at 10:30 2023-10-01 10:30 on 1st Oct. 2023, at 10:30 2023:10:1 10:30 as above 2023 10 01 10:30 as above 2023:10:01 on 1st Oct. 2023, at 00:00 1h30m in 1 hour and 30 minutes from now 13m in 13 minutes from now duration How long that experiment/failure should last. This is relevant only for experiment types where restoration (i.e. termination) instructions are defined. Its accepted syntax is similar to the start setting. It can be either an absolute point in time, or a duration, in the minutes and hours notation (e.g. '5m' will let the failure run for 5 minutes, etc.). If left unspecified, the experiment will last 30 seconds.","title":"Common Configuration"},{"location":"commonExperiments/#experiments-description","text":"The full set of experiments is centrally defined on the Server, in a file of a YAML syntax. Its default location is /etc/chaos-bonobo/experiments.yaml (also ref. Server Configuration ). Its layout can be examined with an example, as follows: - host: 10.10.10.10 failures: - type: Block_Address options: policy: INPUT ip: 10.10.140.100 #disable: true start: 20:32:30 duration: 30m - type: Kill_Process options: pname: sshd #signal: SIGKILL #disable: true start: 0m duration: 0m - type: Stop_Service options: service: nfsserver #disable: true start: 2023-12-31 23:45 duration: 45m - host: NTP-server failures: - type: Block_Address options: policy: INPUT ip: 10.10.140.100 #disable: true start: 1h duration: 5m","title":"Experiments description"},{"location":"commonExperiments/#common-experiment-settings","text":"We will explain the structure and common settings of the experiments. The details of each particular type of experiment are provided in 'Experiments by type' . host The ID by which an Agent, hosted in a targeted machine, identifies itself. An Agent that advertises itself with that ID will retrieve the experiments of the matched 'host' list. It can be, for instance, the targeted host's IP address (e.g. 10.10.10.10) or its hostname (e.g. NTP-server). Also refer to Dynamic host IDs . failures The set of experiments planned for the corresponding host. type The type of experiment (ref. Experiments by type ). options The experiment's options, specific to that particular type of experiment (ref. Experiments by type ). disable If True, this experiment will be skipped. Default value is False. start The trigger time for that experiment. It can be either an absolute time/date value, or a relative one, with reference to the experiments initiation instance (ref. Server reload ). Below are some examples of possible start values. Value Interpretation 10:30 today, at 10:30 2023-10-01 10:30 on 1st Oct. 2023, at 10:30 2023:10:1 10:30 as above 2023 10 01 10:30 as above 2023:10:01 on 1st Oct. 2023, at 00:00 1h30m in 1 hour and 30 minutes from now 13m in 13 minutes from now duration How long that experiment/failure should last. This is relevant only for experiment types where restoration (i.e. termination) instructions are defined. Its accepted syntax is similar to the start setting. It can be either an absolute point in time, or a duration, in the minutes and hours notation (e.g. '5m' will let the failure run for 5 minutes, etc.). If left unspecified, the experiment will last 30 seconds.","title":"Common experiment settings"},{"location":"developerGuide/","text":"Add new experiments # Chaos Bonobo is intented to be easily expandable with new experiment sets, according to the particular needs. The instructions for how an experiment is implemented reside in the active Agents, in the experiments/__init__.py file. The new type of experiment should be defined as a class which inherits from the BaseExperiment parent class. The specifics of the implementation details are abstructed in the parent class. The developer of the new type should only provide (override) the start() and, optionally, the terminate() methods. The type-specific options will be passed in the instantiation of that class. The new experiment should be invoked in the experiments description by its 'type:' field, which should exactly match the name of the class. We will demonstrate these operations with constructing the (already provided) Stop_Service , as an example. Example # Suppose we wish to add anew an experiment for momentarily stopping a systemd service (e.g. sshd.service). The only parameter needed in calling that experiment would be the service's name. E.g. options.service. We choose to name this type of experiments as 'Stop_Service'. Therefore, its description would be like: type: Stop_Service options: service: sshd In experiments/__init__.py we will add the definition of this new class, named 'Stop_Service'. We need to only override the inherited start() and terminate() methods: class Stop_Service(BaseExperiment): def start(self) -> bool: return super().start(command) def terminate(self) -> bool: return super().terminate(command) The logic of each method should be composed by building the 'command' string, which is the shell commands to be called by the methods. The passed options (options.service, in this example) can be retrieved as the class's data member, the 'options' dictionary. The complete implementation of Stop_Service() will be as follows: class Stop_Service(BaseExperiment): def start(self) -> bool: service_name = self.options.get('service') command = f\"systemctl stop {service_name}\" return super().start(command) def terminate(self) -> bool: service_name = self.options.get('service') command = f\"systemctl start {service_name}\" return super().terminate(command)","title":"Developer Guide"},{"location":"developerGuide/#add-new-experiments","text":"Chaos Bonobo is intented to be easily expandable with new experiment sets, according to the particular needs. The instructions for how an experiment is implemented reside in the active Agents, in the experiments/__init__.py file. The new type of experiment should be defined as a class which inherits from the BaseExperiment parent class. The specifics of the implementation details are abstructed in the parent class. The developer of the new type should only provide (override) the start() and, optionally, the terminate() methods. The type-specific options will be passed in the instantiation of that class. The new experiment should be invoked in the experiments description by its 'type:' field, which should exactly match the name of the class. We will demonstrate these operations with constructing the (already provided) Stop_Service , as an example.","title":"Add new experiments"},{"location":"developerGuide/#example","text":"Suppose we wish to add anew an experiment for momentarily stopping a systemd service (e.g. sshd.service). The only parameter needed in calling that experiment would be the service's name. E.g. options.service. We choose to name this type of experiments as 'Stop_Service'. Therefore, its description would be like: type: Stop_Service options: service: sshd In experiments/__init__.py we will add the definition of this new class, named 'Stop_Service'. We need to only override the inherited start() and terminate() methods: class Stop_Service(BaseExperiment): def start(self) -> bool: return super().start(command) def terminate(self) -> bool: return super().terminate(command) The logic of each method should be composed by building the 'command' string, which is the shell commands to be called by the methods. The passed options (options.service, in this example) can be retrieved as the class's data member, the 'options' dictionary. The complete implementation of Stop_Service() will be as follows: class Stop_Service(BaseExperiment): def start(self) -> bool: service_name = self.options.get('service') command = f\"systemctl stop {service_name}\" return super().start(command) def terminate(self) -> bool: service_name = self.options.get('service') command = f\"systemctl start {service_name}\" return super().terminate(command)","title":"Example"},{"location":"installation/","text":"Install the Server # On the system that will host the Server, run: rpm -ivh chaos-bonobo-server-x.y-z.rpm Server Configuration # By default, the Server will be listening on port :4440 and will load the description of experiments from file /etc/chaos-bonobo/experiments.yaml . If however the default values should be overriden, this can be done though /etc/chaos-bonobo/server.conf : PORT=4440 EXPERIMENT_FILE=/etc/chaos-bonobo/experiments.yaml Next, the experiments should be set (ref. How to set the experiments ) Start the Server # To start the Server, run: systemctl start chaos-bonobo-server If there are changes in the experiments, or simply their relative trigger or duration times should be re-evaluated, the Server will have to be reloaded: systemctl reload chaos-bonobo-server To stop the Server: systemctl stop chaos-bonobo-server Note: If the Server stays down for more than a pre-defined duration (ref. TOLERANCE setting) the Agents will cancel their scheduled experiments. Install the Agents # On each targeted system, install the Agent with the following command: rpm -ivh chaos-bonobo-agent-x.y-z.rpm Agent Configuration # Set the Agent's configuration in file /etc/chaos-bonobo/agent.conf : # The server's listening port PORT=4440 # The server's listening address ADDRESS=127.0.0.1 # A script to dynamically compute this host's ID IDFILE=/etc/chaos-bonobo/id_script.sh # A static ID for this host. It will override the IDFILE option #ID= # Logs filename (default: bonobo.log) LOGFILE=/var/log/chaos-bonobo-agent/bonobo.log # A time tolerance (in minutes) that the system can be in an air-gapped state (i.e. it cannot talk with the server). # After that time, all registered experiements will be removed TOLERANCE=5 Dynamic host IDs # A host identifies itself with an ID (ref. Common experiment's host field). This is also how it advertises itself to the Server. This ID can be either static or dynamic. For instance, in the case of a cluster of hosts, where one node has a distinguished or elevated role (e.g. being the master or active node) the dynamic ID can be used, so that the node can identify its having that special role. The Agent will compute its dynamic ID, before each communication with the Server. The dynamic ID should be the output of the \"IDFILE\" script. Note: If the IDFILE script fails, with a return code other than 0, the host's ID will default to its hostname Example of a collocated cluster As an example, suppose a collocated cluster of two nodes, in an active/passive resilience mode, where at any given time the active node acquires a single virtual IP address (VIP) - i.e. alias or secondary address. For example, on the active node of such a cluster, the assigned IP addresses would be as follows - provided that the VIP (10.5.42.62 in this example) is plumbed on the 'eth0' network card interface: # ip a show dev eth0 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:50:56:94:4e:61 brd ff:ff:ff:ff:ff:ff altname enp2s0 altname ens32 inet 10.5.42.60/27 brd 10.5.42.63 scope global eth0 valid_lft forever preferred_lft forever inet 10.5.42.62/27 scope global secondary eth0 valid_lft forever preferred_lft forever inet6 fd00:10:5:42::27/123 scope global valid_lft forever preferred_lft forever inet6 fd00:10:5:42::25/123 scope global valid_lft forever preferred_lft forever inet6 fe80::250:56ff:fe94:4e61/64 scope link valid_lft forever preferred_lft forever In this example, the active node could identify its role by verifying that the cluster's VIP is assigned to it. The VIP could be used as the dynamic ID by which the active node advertises itself to the Server, as such. The IDFILE could be as follows: ifname=eth0 ip a show dev $ifname | awk ' /secondary/ { if (match($0, /inet? (.*)\\//, a)) { print a[1] exit 0 } else exit 1 } ' Start the Agent # To start the Agent, run: systemctl start chaos-bonobo-agent To stop the Server: systemctl stop chaos-bonobo-agent In order to maintain that the Agents start up at every system boot up, it is advised that you also activate them: systemctl enable chaos-bonobo-agent","title":"Installation"},{"location":"installation/#install-the-server","text":"On the system that will host the Server, run: rpm -ivh chaos-bonobo-server-x.y-z.rpm","title":"Install the Server"},{"location":"installation/#server-configuration","text":"By default, the Server will be listening on port :4440 and will load the description of experiments from file /etc/chaos-bonobo/experiments.yaml . If however the default values should be overriden, this can be done though /etc/chaos-bonobo/server.conf : PORT=4440 EXPERIMENT_FILE=/etc/chaos-bonobo/experiments.yaml Next, the experiments should be set (ref. How to set the experiments )","title":"Server Configuration"},{"location":"installation/#start-the-server","text":"To start the Server, run: systemctl start chaos-bonobo-server If there are changes in the experiments, or simply their relative trigger or duration times should be re-evaluated, the Server will have to be reloaded: systemctl reload chaos-bonobo-server To stop the Server: systemctl stop chaos-bonobo-server Note: If the Server stays down for more than a pre-defined duration (ref. TOLERANCE setting) the Agents will cancel their scheduled experiments.","title":"Start the Server"},{"location":"installation/#install-the-agents","text":"On each targeted system, install the Agent with the following command: rpm -ivh chaos-bonobo-agent-x.y-z.rpm","title":"Install the Agents"},{"location":"installation/#agent-configuration","text":"Set the Agent's configuration in file /etc/chaos-bonobo/agent.conf : # The server's listening port PORT=4440 # The server's listening address ADDRESS=127.0.0.1 # A script to dynamically compute this host's ID IDFILE=/etc/chaos-bonobo/id_script.sh # A static ID for this host. It will override the IDFILE option #ID= # Logs filename (default: bonobo.log) LOGFILE=/var/log/chaos-bonobo-agent/bonobo.log # A time tolerance (in minutes) that the system can be in an air-gapped state (i.e. it cannot talk with the server). # After that time, all registered experiements will be removed TOLERANCE=5","title":"Agent Configuration"},{"location":"installation/#dynamic-host-ids","text":"A host identifies itself with an ID (ref. Common experiment's host field). This is also how it advertises itself to the Server. This ID can be either static or dynamic. For instance, in the case of a cluster of hosts, where one node has a distinguished or elevated role (e.g. being the master or active node) the dynamic ID can be used, so that the node can identify its having that special role. The Agent will compute its dynamic ID, before each communication with the Server. The dynamic ID should be the output of the \"IDFILE\" script. Note: If the IDFILE script fails, with a return code other than 0, the host's ID will default to its hostname Example of a collocated cluster As an example, suppose a collocated cluster of two nodes, in an active/passive resilience mode, where at any given time the active node acquires a single virtual IP address (VIP) - i.e. alias or secondary address. For example, on the active node of such a cluster, the assigned IP addresses would be as follows - provided that the VIP (10.5.42.62 in this example) is plumbed on the 'eth0' network card interface: # ip a show dev eth0 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 00:50:56:94:4e:61 brd ff:ff:ff:ff:ff:ff altname enp2s0 altname ens32 inet 10.5.42.60/27 brd 10.5.42.63 scope global eth0 valid_lft forever preferred_lft forever inet 10.5.42.62/27 scope global secondary eth0 valid_lft forever preferred_lft forever inet6 fd00:10:5:42::27/123 scope global valid_lft forever preferred_lft forever inet6 fd00:10:5:42::25/123 scope global valid_lft forever preferred_lft forever inet6 fe80::250:56ff:fe94:4e61/64 scope link valid_lft forever preferred_lft forever In this example, the active node could identify its role by verifying that the cluster's VIP is assigned to it. The VIP could be used as the dynamic ID by which the active node advertises itself to the Server, as such. The IDFILE could be as follows: ifname=eth0 ip a show dev $ifname | awk ' /secondary/ { if (match($0, /inet? (.*)\\//, a)) { print a[1] exit 0 } else exit 1 } '","title":"Dynamic host IDs"},{"location":"installation/#start-the-agent","text":"To start the Agent, run: systemctl start chaos-bonobo-agent To stop the Server: systemctl stop chaos-bonobo-agent In order to maintain that the Agents start up at every system boot up, it is advised that you also activate them: systemctl enable chaos-bonobo-agent","title":"Start the Agent"},{"location":"typeExperiments/","text":"List of Experiment Types # The list below explains the different types of supported experiments, with their respective settings. The implementation and instructions for these experiments are incorporated in the Agents. If new failures are wished to be included in your experiments, the Agents can be expanded, according to the Developer Guide . Block_Address # Add a firewall rule to block incoming/outgoing traffic from/to the specified source/destination. Duration instruction: Required Options policy : Possible values: INPUT, OUTPUT ip : The IP address to block. A source address in the INPUT policy case, or a destination address in the OUTPUT policy case. protocol : The protocol (e.g. tcp, udp) when referencing a port sport : Block packages with this source port dport : Block packages with this destination port Example type: Block_Address options: policy: INPUT ip: 10.10.140.100 Traffic_Throttling # Impose delays, jitter or packet loss to the egress traffic of a network interface. Delay and jitter cannot be applied together with packet loss, at the same time. Duration instruction: Required Options device : The network interface device (e.g. eth0) delay : Milliseconds of delay jitter : Milliseconds of jitter. It should always be set together with delay packet_loss : Percentage of lost packets Example type: Traffic_Throttling options: device: eth0 delay: 200 jitter: 100 Kill_Process # Send a specific signal (SIGKILL, by default) to the running process(es), matching a name. Duration instruction: N/A Options pname : The name of running process(es) to match. It will match the output of pidof command. signal : The signal to send to the matched process(es). It can be either the signal's full name or its numeric representation. Default: SIGKILL(9) Example type: Kill_Process options: pname: mongod signal: SIGTERM Stop_Service # Stop a systemd service, for a specified period. Duration instruction: Required Options service : The name of the running service to stop. Example type: Stop_Service options: service: sshd Spawn_Command # Spawn a process, which should be run as a detached daemon. Duration instruction: Required Options command : The command line Example type: Spawn_Command options: command: 'sleep 200' Reboot # Reboot the system Duration instruction: N/A Options N/A Example type: Reboot Kernel_Panic # Cause a Kernel Panic Duration instruction: N/A Options N/A Example type: Kernel_Panic","title":"Experiments by Type"},{"location":"typeExperiments/#list-of-experiment-types","text":"The list below explains the different types of supported experiments, with their respective settings. The implementation and instructions for these experiments are incorporated in the Agents. If new failures are wished to be included in your experiments, the Agents can be expanded, according to the Developer Guide .","title":"List of Experiment Types"},{"location":"typeExperiments/#block_address","text":"Add a firewall rule to block incoming/outgoing traffic from/to the specified source/destination. Duration instruction: Required Options policy : Possible values: INPUT, OUTPUT ip : The IP address to block. A source address in the INPUT policy case, or a destination address in the OUTPUT policy case. protocol : The protocol (e.g. tcp, udp) when referencing a port sport : Block packages with this source port dport : Block packages with this destination port Example type: Block_Address options: policy: INPUT ip: 10.10.140.100","title":"Block_Address"},{"location":"typeExperiments/#traffic_throttling","text":"Impose delays, jitter or packet loss to the egress traffic of a network interface. Delay and jitter cannot be applied together with packet loss, at the same time. Duration instruction: Required Options device : The network interface device (e.g. eth0) delay : Milliseconds of delay jitter : Milliseconds of jitter. It should always be set together with delay packet_loss : Percentage of lost packets Example type: Traffic_Throttling options: device: eth0 delay: 200 jitter: 100","title":"Traffic_Throttling"},{"location":"typeExperiments/#kill_process","text":"Send a specific signal (SIGKILL, by default) to the running process(es), matching a name. Duration instruction: N/A Options pname : The name of running process(es) to match. It will match the output of pidof command. signal : The signal to send to the matched process(es). It can be either the signal's full name or its numeric representation. Default: SIGKILL(9) Example type: Kill_Process options: pname: mongod signal: SIGTERM","title":"Kill_Process"},{"location":"typeExperiments/#stop_service","text":"Stop a systemd service, for a specified period. Duration instruction: Required Options service : The name of the running service to stop. Example type: Stop_Service options: service: sshd","title":"Stop_Service"},{"location":"typeExperiments/#spawn_command","text":"Spawn a process, which should be run as a detached daemon. Duration instruction: Required Options command : The command line Example type: Spawn_Command options: command: 'sleep 200'","title":"Spawn_Command"},{"location":"typeExperiments/#reboot","text":"Reboot the system Duration instruction: N/A Options N/A Example type: Reboot","title":"Reboot"},{"location":"typeExperiments/#kernel_panic","text":"Cause a Kernel Panic Duration instruction: N/A Options N/A Example type: Kernel_Panic","title":"Kernel_Panic"}]}